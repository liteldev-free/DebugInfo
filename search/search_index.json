{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Analyzing bedrock is not a privilege for the few.</p> <p>This project is specifically designed to help you reverse engineer Minecraft Bedrock Edition (especially dedicated servers) since version 1.21.3.01.</p> <p></p>"},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at redbeana44945@gmail.com. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guide","text":"<p>We welcome contributions of any kind, including but not limited to</p> <ul> <li>Open a new issue and tell us what you think.</li> <li>Contribute directly to the DebugInfo toolchain.</li> <li>Correct documentation errors, including translation errors.</li> <li>Write a new tutorial.</li> <li>Any others may not be listed.</li> </ul>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding style","text":"<ul> <li>All code must be formatted before submission (follow <code>ruff.toml</code> and <code>.clang-format</code>)</li> <li>Except for the class name which uses CamelCase, all others use snake_style.</li> <li>Private member names begin with <code>m_</code> (C++ code only).</li> </ul>"},{"location":"CONTRIBUTING/#interface-stability","title":"Interface Stability","text":"<ul> <li>Great, you don't need to make ABI stability guarantees!</li> <li>Tool usage should not be significantly modified (as appropriate)</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>The content of this page is awaiting update.</p>"},{"location":"license/","title":"MIT License","text":"<p>Copyright (c) 2025 Open LiteLDev</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"releases/","title":"Releases","text":""},{"location":"releases/#v030","title":"v0.3.0","text":"<p>This is the latest released version, see the full changelog.</p>"},{"location":"releases/#summary","title":"Summary","text":"<p>This is the first stable release.</p>"},{"location":"releases/#pre-built-packages","title":"Pre-built packages","text":"<p> Linux (x86_64)</p>"},{"location":"community/","title":"Community","text":"<ul> <li> <p> Discord</p> <p>The best place to communicate together.</p> <p> Join the group</p> </li> <li> <p> Telegram</p> <p>If you just want to receive notifications.</p> <p> Subscribe to channel</p> </li> </ul>"},{"location":"research/","title":"Research","text":"<p>The content of this page is awaiting update.</p>"},{"location":"toolchain/","title":"Getting started","text":"<p>All the tools you need are here!</p>"},{"location":"toolchain/#introduction","title":"Introduction","text":"<ul> <li><code>DeThunk</code> - Header file preprocessing.</li> <li><code>DumpSYM</code> - Extract symbols from header files.</li> <li><code>ExtractSYM</code> - Extracting symbols from elsewhere.</li> <li><code>AskRVA</code> - Batch query the RVA of symbols.</li> <li><code>MakePDB</code> - Generate debugging information in a common format.</li> <li><code>BlobExtractor</code> - Explore MagicBlob.</li> </ul>"},{"location":"toolchain/#build","title":"Build","text":"<p>Tip</p> <p>You can get prebuilt versions from Releases or GitHub Actions.</p> <p>Install build dependencies</p> <pre><code>pacman -S llvm clang git xmake\n</code></pre> <p>Clone the repository</p> <pre><code>git clone https://github.com/liteldev-free/DebugInfo.git\n</code></pre> <p>Configure and build</p> <pre><code>xmake\n</code></pre> Advanced: Use the native symbol resolver <p>Switching to the native symbol resolver is not recommended unless you have a enough reason to do so.  This will rely on PreLoader, which is closed source software of unknown security and is only available on Windows.</p> <pre><code>xmake f --symbol-resolver=native\n</code></pre> <p>Will automatically install build dependencies and build all targets.</p>"},{"location":"toolchain/AskRVA/","title":"AskRVA","text":"<p>This tool is used to parse bedrock_runtime_data (MagicBlob), accepts the results of DumpSYM/ExtractSYM as input and outputs a symbol table in JSON format.</p>"},{"location":"toolchain/AskRVA/#magicblob-parsing-backend","title":"MagicBlob parsing backend","text":"<p>The libdi provides two parser backends: <code>builtin</code> and <code>native</code>. By default, the built-in is used.</p> <ul> <li><code>builtin</code> is an open source MagicBlob format implementation that supports cross-platform.</li> <li><code>native</code> uses LiteLDev's PreLoader, which is closed source and only supports Windows platform.</li> </ul> <p>The choice of which backend to use is controlled by build options, see the Build section.</p> <p>Warning</p> <p>If you do need to use the native backend, make sure you do it in a restricted environment.</p>"},{"location":"toolchain/AskRVA/#usage","title":"Usage","text":"<pre><code>Usage: askrva [--help] [--version] [--magic-blob VAR] --output VAR [--output-failed VAR] path...\n\nPositional arguments:\n  path                  Path to the symbol list file. [nargs: 1 or more] [required]\n\nOptional arguments:\n  -h, --help            shows help message and exits\n  -v, --version         prints version information and exits\n  --magic-blob          Path to magic blob (for builtin-symbol-resolver only). [nargs=0..1] [default: \"bedrock_runtime_data\"]\n  -o, --output          Path to output. [required]\n  -of, --output-failed  Path to output failed entries.\n</code></pre> <p>Tip</p> <p>If the native symbol resolver is used, MagicBlob must be the \"bedrock_runtime_data\" file in the current directory. Custom read paths are not supported.</p> Example <pre><code>./askrva symlist.txt --output succeed.json --output-failed failed.txt\n</code></pre>"},{"location":"toolchain/BlobExtractor/","title":"BlobExtractor","text":"<p>This tool is used to extract all data from MagicBlob and is generally used for debugging purposes.</p>"},{"location":"toolchain/BlobExtractor/#usage","title":"Usage","text":"<pre><code>Usage: blob-extractor [--help] [--version] --output VAR magicblob\n\nPositional arguments:\n  magicblob      Path to magic blob. [required]\n\nOptional arguments:\n  -h, --help     shows help message and exits\n  -v, --version  prints version information and exits\n  -o, --output   Path to output symlist. [required]\n</code></pre> Example <pre><code>./blob-extractor bedrock_runtime_data --output dump.json\n</code></pre>"},{"location":"toolchain/DeThunk/","title":"DeThunk","text":"<p>This is the header file preprocessor. The header files are generated by HeaderGen (LiteLDev's non-public software). Some of the generated things may cause incorrect symbols or compilation failures. This tool is used to erase them.</p>"},{"location":"toolchain/DeThunk/#exclusion-list","title":"Exclusion List","text":"<p>It is generally considered that excluding something is a desperate measure, so there are plans to completely rewrite DeThunk.</p> <p>Tip</p> <p>An exclusion list is maintained based on the branch name of the header files and can be obtained from here.</p> <p>The exclusion list is mainly for \"types\", and the reasons for exclusion are varied. In short, the exclusion list serves \"passing compilation\".</p>"},{"location":"toolchain/DeThunk/#presets","title":"Presets","text":"<p>We provide preset rules for general use, and generally prefer to use presets instead of detailed options.</p> Preset Equal to... <code>--preset-extract-names</code> <code>--remove-constructor-thunk</code> <code>--remove-destructor-thunk</code> <code>--remove-virtual-function-thunk</code> <code>--remove-virtual-table-pointer-thunk</code> <code>--restore-static-variable</code> <code>--preset-extract-types</code> <code>--preset-extract-names</code> <code>--restore-member-variable</code>"},{"location":"toolchain/DeThunk/#usage","title":"Usage","text":"<pre><code>usage: dethunk [-h] --exclusion-list EXCLUSION_LIST [--remove-constructor-thunk] [--remove-destructor-thunk]\n               [--remove-virtual-table-pointer-thunk] [--remove-virtual-function-thunk] [--restore-static-variable]\n               [--restore-member-variable] [--all] [--preset-extract-names] [--preset-extract-types]\n               path\n\npositional arguments:\n  path                  Path to header project.\n\noptions:\n  -h, --help            show this help message and exit\n  --exclusion-list EXCLUSION_LIST\n                        Configure ignore rules.\n  --remove-constructor-thunk\n  --remove-destructor-thunk\n  --remove-virtual-table-pointer-thunk\n  --remove-virtual-function-thunk\n  --restore-static-variable\n  --restore-member-variable\n  --all                 Apply all remove/restore options.\n  --preset-extract-names\n  --preset-extract-types\n</code></pre> <p>Warning</p> <p>The modification will be done directly on the original file.</p> Example <pre><code>python main.py --all --exclusion-list exclusion_list/r21_u6.toml path/to/header\n</code></pre>"},{"location":"toolchain/DumpSYM/","title":"DumpSYM","text":"<p>This is a clang compiler plugin that outputs all declared symbols(and their types).</p>"},{"location":"toolchain/DumpSYM/#type-of-declaration","title":"Type of declaration","text":"<p>This depends on the two main base classes in LLVM: FunctionDecl, VarDecl. The general type name is the class name minus the \"Decl\" suffix.</p> <p>See also <code>DeclType</code> for internal implementation details. (1)</p> <ol> <li>https://github.com/liteldev-free/DebugInfo/blob/91bf6546da500b74186d26671d020c1b0a30c563/src/data_format/type/decl_type.h</li> </ol>"},{"location":"toolchain/DumpSYM/#compiler-compatibility","title":"Compiler compatibility","text":"<ul> <li>Only clang is supported. (GCC/MSVC are not supported)</li> <li>Only tested on Linux, not sure if it works on Windows.</li> </ul>"},{"location":"toolchain/DumpSYM/#usage","title":"Usage","text":"<p>Note</p> <p>Both ItaniumABI and MSABI are supported, depending on the target passed to the compiler.</p> <p>Simply pass <code>-fplugin=...</code> to clang and the plugin will run automatically.</p> Example <pre><code>clang++ -fplugin=/path/to/plugin/libdumpsym.so test.cpp\n</code></pre> <p>The result will be generated in the <code>&lt;TU&gt;.symbols</code> file</p> <pre><code>$ cat test.cpp.symbols\nFunction, main\nCXXDestructor, ??_DThreadPool@OS@@QEAAXXZ\nCXXConstructor, ??0SpinLockImpl@@QEAA@AEBV0@@Z\nCXXMethod, ??4SpinLockImpl@@QEAAAEAV0@AEBV0@@Z\nVar, ?Low@OSThreadPriority@Threading@Bedrock@@2V123@B\n</code></pre>"},{"location":"toolchain/ExtractSYM/","title":"ExtractSYM","text":"<p>This tool is used to extract symbols from PDB.</p>"},{"location":"toolchain/ExtractSYM/#usage","title":"Usage","text":"<pre><code>Usage: extractsym [--help] [--version] --output VAR pdb\n\nPositional arguments:\n  pdb            Path to program database. [required]\n\nOptional arguments:\n  -h, --help     shows help message and exits\n  -v, --version  prints version information and exits\n  -o, --output   Path to output symlist. [required]\n</code></pre> Example <pre><code>./extractsym bedrock_server.pdb --output symbols.txt\n</code></pre>"},{"location":"toolchain/MakePDB/","title":"MakePDB","text":"<p>Integrate data and generate a common format.</p>"},{"location":"toolchain/MakePDB/#where-to-get-typeinfo","title":"Where to get TypeInfo","text":"<p>As we all know, the header files generated by LiteLDev contain type information. But it is not easy to use them directly (we are trying to do so). The current approach is to let the compiler generate PDBs containing type information, and then <code>makepdb</code> merges them from them.</p>"},{"location":"toolchain/MakePDB/#usage","title":"Usage","text":"<p>Warning</p> <p>Please make sure that the symbol data (generated by askrva) matches the original COFF (bedrock_server.exe).</p> <pre><code>Usage: makepdb [--help] [--version] --program VAR --symbol VAR [--typeinfo VAR] --output VAR\n\nOptional arguments:\n  -h, --help     shows help message and exits\n  -v, --version  prints version information and exits\n  --program      Path to bedrock_server.exe [required]\n  --symbol       Path to symbol data. [required]\n  --typeinfo     Path to compiler PDB which contains TPI &amp; IPI (will merged into result PDB).\n  -o, --output   Path to output PDB. [required]\n</code></pre> Example <pre><code>./makepdb --program test.exe --symbol dump.json --output test.pdb\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/","title":"Generate your first PDB","text":"<p>Tip</p> <p>All operations in this article are performed under Linux.</p> <p> DebugInfo: ccac962  Header: 642a16f  Bedrock Dedicated Server: 1.21.60.10</p> <p>Today we will generate a complete PDB, including symbol tables and type information. Before we start, I assume that you have followed the build instructions, or downloaded a pre-built, all in all you should have a complete DebugInfo toolchain.</p>"},{"location":"tutorial/generate-a-pdb-from-scratch/#install-build-dependencies","title":"Install build dependencies","text":""},{"location":"tutorial/generate-a-pdb-from-scratch/#setup-msvc-wine","title":"Setup msvc-wine","text":"<p>Since everything is done under Linux, and the header depends on MSSTL, you must install msvc-wine (not just clang or clang-cl). If you are working under Windows, you should only need to install Visual Studio.</p> <pre><code>yay -S msvc-wine\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#setup-clang-xmake","title":"Setup clang &amp; xmake","text":"<p>Because the header file project uses the xmake build system.</p> <pre><code>pacman -S clang xmake\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#get-the-header-files","title":"Get the header files","text":"<p>We use <code>liteldev-free/Header</code> instead of the header branch of <code>liteldev/LeviLamina</code> because we made some patches on the former. <code>liteldev-free/Header</code> is synced from upstream for each version from time to time.</p> <pre><code>git clone https://github.com/liteldev-free/Header.git\n</code></pre> <p>Switch to the desired branch. The <code>_p</code> suffix means \"patched\".</p> <pre><code>git checkout -b mc/r21_u6_p\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#prepare-other-things","title":"Prepare other things","text":"<ul> <li>Current version of <code>bedrock_server.exe</code> (1)</li> <li>Matching version of <code>bedrock_runtime_data</code> (2)</li> <li>The last version with debug info <code>bedrock_server.pdb</code> (3)</li> </ul> <ol> <li>Download from the official page</li> <li>Published by LiteLDev here</li> <li>Download 1.21.3.01 (Windows)</li> </ol>"},{"location":"tutorial/generate-a-pdb-from-scratch/#extracting-symbols-from-header","title":"Extracting symbols from header","text":"<p>Enter the header file directory and configure</p> <pre><code>xmake f -m debug -p windows -a x64 --toolchain=clang --cxflags=-fplugin=/path/to/libdumpsym.so --sdk=/opt/msvc\n</code></pre> <p>Then, use DeThunk for preprocessing</p> <p>Tips</p> <p>The path passed in should end with <code>mc</code> instead of <code>src</code> because it is not expected that the header files of <code>ll</code> should be traversed.</p> <pre><code>cd /path/to/scripts/dethunk\npython main.py \"/path/to/header/mc\" --preset-extract-names --exclusion-list exclusion_list/r21_u6.toml\n</code></pre> <p>If there are no errors, start the build.</p> <pre><code>xmake build\n</code></pre> <p>If everything is OK, extract the symbol list from the directory below and copy it out.</p> <pre><code>build/.objs/bdsheader/windows/x64/debug/test/__cpp_main.cpp.cpp.symbols\n</code></pre> <p>The contents of the file look like this</p> <pre><code>CXXMethod, ?Submit@ThreadPool@OS@@QEAAXXZ\nCXXConstructor, ??0WebviewDownloadInfo@@QEAA@XZ\nCXXMethod, ??4WebviewDownloadInfo@@QEAAAEAU0@AEBU0@@Z\nCXXMethod, ?getBatteryLevel@FakeBatteryMonitorInterface@@UEBA\n...\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#extracting-symbols-from-former-pdb","title":"Extracting symbols from former PDB","text":"<p>As we all know, many functions in C++ programs are generated at compile time, so there are too few symbols that can be directly extracted from header files. There is currently a lack of tools to directly generate \"template symbols\". (1) So we need to extract symbols from the previous PDB, use the following command</p> <ol> <li>You may be interested in this issue.</li> </ol> <pre><code>./extractsym \"/path/to/former/bedrock_server.pdb\" -o 1.21.3.01.symbols\n</code></pre> <p>Similarly, copy this file out, its content is similar to...</p> <pre><code>Function, ??1I18nImpl@@UEAA@XZ\nFunction, ??_9PeerConnectionInterface@webrtc@@$BPI@AA\nFunction, ??1CommandArea@@QEAA@XZ\nVar, ??_C@_0M@DPBEHEC@Destination@\n...\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#extracting-types-from-header","title":"Extracting types from header","text":"Optional step <p>This step is a bit complicated and unstable, and has some \"workaround\" meaning. If you can't figure it out, you can skip it.</p> <p>First, you still need to use the header file, so restore it first.</p> <pre><code>cd /path/to/header/proj\ngit restore .\n</code></pre> <p>Then run DeThunk.</p> <pre><code>python main.py \"/path/to/header/mc\" --preset-extract-types --exclusion-list exclusion_list/r21_u6.toml\n</code></pre> <p>Then rebuild.</p> <pre><code>xmake build\n</code></pre> <p>After completion, you should be able to find <code>bdsheader.pdb</code> in the following path. In general it should be larger than 40M, copy it out.</p> <pre><code>build/windows/x64/release\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#generate-symbol-table","title":"Generate symbol table","text":"<p>Since we just extracted the symbol lists from two different places, we pass them both to <code>askrva</code>.</p> <p>Tip</p> <p>By the way, this will read bedrock_runtime_data from the current directory by default, make sure it exists.</p> <pre><code>./askrva __cpp_main.cpp.cpp.symbols 1.21.3.01.symbols -o succeed.json -of failed.txt\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#generate-pdb","title":"Generate PDB","text":"<p>Now everything is ready, execute the following command to generate PDB.</p> <p>Question</p> <p>You might be wondering why you are passing in bedrock_server.exe, this is so that the generated PDB matches the COFF file (so that the debugger can use it).</p> <pre><code>./makepdb --program bedrock_server.exe --symbol succeed.json --typeinfo bdsheader.pdb -o bedrock_server.pdb\n</code></pre>"},{"location":"tutorial/generate-a-pdb-from-scratch/#finish","title":"Finish","text":"<p>Everything is done! According to the information mentioned at the beginning of the article, this will generate at least 70M of PDB, which will be very useful to you, so enjoy using it!</p> <p>If you have any questions, please join the community for discussion.</p>"}]}